#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include "json.hpp" // For nlohmann/json
#include <gmp.h>    // For GMP library

mpz_class convert_to_base10(const std::string& value, int base) {
    mpz_class result;
    mpz_set_str(result.get_mpz_t(), value.c_str(), base);
    return result;
}

std::vector<mpz_class> multiply_polynomials(const std::vector<mpz_class>& poly1, const std::vector<mpz_class>& poly2) {
    int degree1 = poly1.size() - 1;
    int degree2 = poly2.size() - 1;
    std::vector<mpz_class> result(degree1 + degree2 + 1, 0);

    for (int i = 0; i <= degree1; ++i) {
        for (int j = 0; j <= degree2; ++j) {
            result[i + j] += poly1[i] * poly2[j];
        }
    }
    return result;
}

int main() {
    // Read the JSON file
    std::ifstream inputFile("testcase.json");
    if (!inputFile.is_open()) {
        std::cerr << "Error: Could not open the JSON file." << std::endl;
        return 1;
    }
    nlohmann::json data;
    inputFile >> data;
    
    int k = data["keys"]["k"];
    int degree = k - 1;
    
    // Store the roots as big integers
    std::vector<mpz_class> roots;
    
    // Read the first 'degree' roots from the JSON object
    for (int i = 1; i <= degree; ++i) {
        std::string root_index = std::to_string(i);
        std::string base_str = data[root_index]["base"];
        std::string value_str = data[root_index]["value"];
        
        int base = std::stoi(base_str);
        roots.push_back(convert_to_base10(value_str, base));
    }
    
    // Start with a polynomial of degree 0: P(x) = 1
    std::vector<mpz_class> polynomial = {1};
    
    // Iteratively multiply the polynomial by (x - root) for each root
    for (const auto& root : roots) {
        std::vector<mpz_class> factor = {-root, 1}; // Represents (x - root)
        polynomial = multiply_polynomials(polynomial, factor);
    }
    
    // Print the coefficients in descending order of power
    std::cout << "Coefficients of the polynomial:" << std::endl;
    for (int i = polynomial.size() - 1; i >= 0; --i) {
        std::cout << polynomial[i].get_str() << " ";
    }
    std::cout << std::endl;
    
    return 0;
}
